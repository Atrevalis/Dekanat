package GUI;

import GUI.Add.AddUser;
import GUI.Delete.DeleteUser;
import GUI.Update.UpdUser;
import GUI.Utils.HttpURLConnection;
import GUI.Utils.JsonHelper;
import com.dekanat.dekanat.server.entity.User;
import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionListener;
import java.io.IOException;
import java.lang.reflect.Type;
import java.util.ArrayList;

public class AdministrationList {


    private JPanel content;
    private JButton addButton;
    private JButton updateButton;
    private JButton deleteButton;
    private JList list1;
    private JButton backButton;
    private JButton openButton;
    private JTable table1;


    public AdministrationList(Dimension minDimension, JFrame parent) throws IOException {

        JFrame frame = new JFrame();
        JPanel contents = new JPanel();
        frame.setMinimumSize(minDimension);
        frame.setSize(640, 480);
        frame.setContentPane(content);
        frame.setLocationRelativeTo(null);
        frame.setVisible(true);
        frame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);


        String json = HttpURLConnection.sendGET("/listUser");

        json = JsonHelper.replacer(json);
        Type listOfMyClassObject = new TypeToken<ArrayList<User>>() {
        }.getType();

        Gson gson = new Gson();
        ArrayList<User> outputList = gson.fromJson(json, listOfMyClassObject);

        DefaultListModel<String> dlm = new DefaultListModel<String>();
        for (User user : outputList) {
            dlm.add(0, user.getLogin());
        }
        JScrollPane scrollableList = new JScrollPane();
        String[] data1 = {"Чай", "Кофе", "Минеральная", "Морс"};
        JList<String> list = new JList(data1);
        list.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        scrollableList.add(list);
        frame.add(scrollableList);
        // contents.add(new JScrollPane(list1));


        json = JsonHelper.replacer(json);


        ActionListener listListener = e -> {
            frame.setVisible(false);
            new Navigation(minDimension, frame);
        };

        // scrollableList.

        ActionListener backListener = e -> {
            frame.setVisible(false);
            new Navigation(minDimension, frame);

        };
        backButton.addActionListener(backListener);

        ActionListener addListener = e -> {
            new AddUser(minDimension, frame);
        };
        addButton.addActionListener(addListener);

        ActionListener updListener = e -> {
            new UpdUser(minDimension, frame);
        };
        updateButton.addActionListener(updListener);

        ActionListener delListener = e -> {
            frame.setVisible(false);
            new DeleteUser(minDimension, frame);

        };
        deleteButton.addActionListener(delListener);
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        content = new JPanel();
        content.setLayout(new GridLayoutManager(2, 5, new Insets(0, 0, 0, 0), -1, -1));
        final JScrollPane scrollPane1 = new JScrollPane();
        content.add(scrollPane1, new GridConstraints(1, 1, 1, 3, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        final JScrollPane scrollPane2 = new JScrollPane();
        scrollPane1.setViewportView(scrollPane2);
        table1 = new JTable();
        scrollPane2.setViewportView(table1);
        addButton = new JButton();
        addButton.setText("Добавить");
        content.add(addButton, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        updateButton = new JButton();
        updateButton.setText("Изменить");
        content.add(updateButton, new GridConstraints(0, 3, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        deleteButton = new JButton();
        deleteButton.setText("Удалить");
        content.add(deleteButton, new GridConstraints(0, 4, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        backButton = new JButton();
        backButton.setText("Назад");
        content.add(backButton, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        openButton = new JButton();
        openButton.setText("Открыть");
        content.add(openButton, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return content;
    }
}